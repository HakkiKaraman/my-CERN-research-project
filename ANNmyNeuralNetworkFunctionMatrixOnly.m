function [y1] = ANNmyNeuralNetworkFunctionMatrixOnly(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 08-Jul-2021 13:41:02.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx2 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.0506201193943074;0.0500038705964527];
x1_step1.gain = [0.506411566172247;0.507455803564727];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.5260470216137718147;0.96236898636893719594;0.32053278971457849211;-2.9429155566961902046;0.93420201456636497994;0.92963401716495919214;-3.2248066565525510541;-3.4251547386826328712;1.0531813400191538665;-3.1675172035894045841];
IW1_1 = [0.54241371327291942883 -2.1821271778112221185;-0.70499453918540455621 0.29830548593428790616;-0.067489554821623679026 -1.5198579017861952867;10.235280380925990684 5.0475908728792386881;-0.67534522831984544755 -0.57471627317429918591;-4.4227609570295864927 4.4229239519634857558;-0.077239454591754880264 -7.5824927004521862628;0.0066838890768802488446 -5.1582671068749226251;-0.86603407601362036861 -0.66179925009897955235;-7.2698651320148126587 8.9607362729369874899];

% Layer 2
b2 = 2.0258534704117416858;
LW2_1 = [0.74513484503889659827 0.78290733981702209654 0.26613412955567883333 -0.00075517459159771618566 -4.4066950772593047603 0.0024753552759333727687 0.0081808121495641015347 0.01792585428952987725 2.1867330405809077831 1.1490779122745122809];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.00751309553430129;
y1_step1.xoffset = 0.000551526497282696;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
